import{escapeHTML,tr,compareProfile,getProfileIcon}from"./utils.js";import Toastify from"../../../lib/toastify/toastify-es.js";const updateMainBtn=(mainBtnEl,profile,profiles)=>{let text=tr("profile_"+profile.name)||profile.name;profile.defaultProfileName&&(text+=" ["+profile.defaultProfileName+"]");var targetProfile=profile;"VirtualProfile"===profile.profileType&&(targetProfile=profiles["+"+profile.defaultProfileName]);let iconClass=getProfileIcon(targetProfile);targetProfile!==profile&&(iconClass+=" om-virtual-profile-icon"),mainBtnEl.dataset.profile=profile.name,mainBtnEl.innerHTML=`\n    <span>\n      <span class="glyphicon ${iconClass}" style="color: ${targetProfile.color};">\n      </span>\n    </span>\n    <span>${escapeHTML(text)}</span>\n    <span class="caret"></span>\n  `};function createMenuItemForProfile(profile,profiles){const profileDisp=document.createElement("li");profileDisp.classList.add("om-nav-item");let text=tr("profile_"+profile.name)||profile.name;profile.defaultProfileName&&(text+=" ["+profile.defaultProfileName+"]");var targetProfile=profile;"VirtualProfile"===profile.profileType&&(targetProfile=profiles["+"+profile.defaultProfileName]),profileDisp.setAttribute("title",targetProfile.desc||targetProfile.name||"");let iconClass=getProfileIcon(targetProfile);return targetProfile!==profile&&(iconClass+=" om-virtual-profile-icon"),profileDisp.innerHTML=`\n      <a href="#" role="button">\n        <span class="glyphicon ${iconClass}" style="color: ${targetProfile.color};"></span>\n        <span class="om-profile-name">${escapeHTML(text)}</span>\n      </a>\n  `,profileDisp}function createProfileDropdown(state,containerEl){const profileSelectorEl=containerEl.querySelector(".omega-profile-select"),mainBtnEl=profileSelectorEl.querySelector(".dropdown-toggle");var ul=document.createElement("ul");ul.classList.add("dropdown-menu");const{availableProfiles:availableProfiles,lastProfileNameForCondition:lastProfileNameForCondition,currentProfileName:currentProfileName,validResultProfiles:validResultProfiles,currentProfileCanAddRule:currentProfileCanAddRule}=state,profiles=validResultProfiles.map((function(name){return availableProfiles["+"+name]})).sort(compareProfile),preSelectedProfileName=lastProfileNameForCondition||"direct";updateMainBtn(mainBtnEl,availableProfiles["+"+preSelectedProfileName],availableProfiles),profiles.forEach((function(profile){if(0!==profile.name.indexOf("__")&&!(profile.name===currentProfileName&&validResultProfiles.length>1)){var li=createMenuItemForProfile(profile,availableProfiles);preSelectedProfileName==profile.name&&li.classList.add("active"),li.querySelector("a").onclick=e=>{ul.querySelectorAll(".om-nav-item.active").forEach((el=>el.classList.remove("active"))),li.classList.add("active"),e.preventDefault(),e.stopPropagation(),updateMainBtn(mainBtnEl,profile,availableProfiles),$(mainBtnEl).dropdown("toggle")},ul.appendChild(li)}})),profileSelectorEl.appendChild(ul)}const generateConditionSuggestion=function(currentDomain,subdomain="",subdomainLevel=0){let conditionSuggestion=null,currentDomainEscaped=currentDomain.replace(/\./g,"\\."),domainLooksLikeIp=!1;if(currentDomain.indexOf(":")>=0?(domainLooksLikeIp=!0,"["!==currentDomain[0]&&(currentDomainEscaped=(currentDomain="["+currentDomain+"]").replace(/\./g,"\\.").replace(/\[/g,"\\[").replace(/\]/g,"\\]"))):currentDomain[currentDomain.length-1]>=0&&(domainLooksLikeIp=!0),domainLooksLikeIp)conditionSuggestion={HostWildcardCondition:currentDomain,HostRegexCondition:"^"+currentDomainEscaped+"$",UrlWildcardCondition:"*://"+currentDomain+"/*",UrlRegexCondition:"://"+currentDomainEscaped+"(:\\d+)?/",KeywordCondition:currentDomain};else{if(subdomain){let subdomains=subdomain.split(".");(subdomainLevel%=subdomains.length+1)>0&&(subdomains=subdomains.splice(subdomainLevel-1),subdomains.push(currentDomain),currentDomainEscaped=(currentDomain=subdomains.join(".")).replace(/\./g,"\\."))}conditionSuggestion={HostWildcardCondition:"*."+currentDomain,HostRegexCondition:"(^|\\.)"+currentDomainEscaped+"$",UrlWildcardCondition:"*://*."+currentDomain+"/*",UrlRegexCondition:"://([^/.]+\\.)*"+currentDomainEscaped+"(:\\d+)?/",KeywordCondition:currentDomain}}return conditionSuggestion},getState=()=>new Promise((resolve=>{OmegaTargetPopup.getState(["availableProfiles","currentProfileName","validResultProfiles","isSystemProfile","currentProfileCanAddRule","proxyNotControllable","externalProfile","showExternalProfile","lastProfileNameForCondition","customCss"],(function(err,state){resolve(state)}))}));export const initUrlCellDetail=async cell=>{const urlStr=cell.getValue(),request=cell.getRow().getData(),tabulatorInstance=cell.getTable();tabulatorInstance.alert("loading...");const state=await getState(),{availableProfiles:availableProfiles,lastProfileNameForCondition:lastProfileNameForCondition,currentProfileName:currentProfileName,validResultProfiles:validResultProfiles,currentProfileCanAddRule:currentProfileCanAddRule}=state,urlContainerEl=document.createElement("div");urlContainerEl.classList.add("url-detail-container");const url=new URL(urlStr),domain=OmegaPac.getBaseDomain(url.hostname),subdomain=OmegaPac.getSubdomain(urlStr);let headerTitle=tr("popup_addCondition");if(currentProfileCanAddRule){const profileLink=`<a href="${chrome.runtime.getURL("options.html")+"#!/profile/"+encodeURIComponent(currentProfileName)}" target="_blank">${escapeHTML(currentProfileName)}</a>`;headerTitle=`${tr("popup_addConditionTo")} (${profileLink})`}const shortTitle=request.actionProfile?.shortTitle||currentProfileName||"";urlContainerEl.innerHTML=`\n  <div class="url-details-container">\n    <div class="header">\n      <h3>\n        ${escapeHTML(shortTitle)}\n      </h3>\n    </div>\n    <div class="content">\n      <form class="condition-form">\n        <fieldset>\n          <legend>${headerTitle}</legend>\n          <div class="form-group" style="display:none;"><label>${tr("options_conditionType")}</label>\n            <select class="form-control condition-type" name="conditionType">\n              <option value="HostWildcardCondition" selected>${tr("condition_HostWildcardCondition")}</option>\n              <option value="HostRegexCondition">${tr("condition_HostRegexCondition")}</option>\n              <option value="UrlWildcardCondition">${tr("condition_UrlWildcardCondition")}</option>\n              <option value="UrlRegexCondition">${tr("condition_UrlRegexCondition")}</option>\n              <option value="KeywordCondition">${tr("condition_KeywordCondition")}</option>\n            </select>\n          </div>\n          <div class="form-group">\n            <label>${tr("options_conditionDetails")}</label>\n            <span class="input-group">\n              <input class="form-control condition-details" type="text" required readonly>\n              <span class="input-group-btn">\n                <button class="btn btn-default toggle-subdomain-level-btn" type="button">\n                  <i class="glyphicon glyphicon-transfer"></i>\n                </button>\n              </span>\n            </span>\n          </div>\n          <div class="form-group">\n            <label>${tr("options_resultProfileForSelectedDomains")}</label>\n            <div class="btn-group omega-profile-select" dropdown="dropdown">\n              <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn btn-default dropdown-toggle">\n                Dropdown trigger\n                <span class="caret"></span>\n              </button>\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    </div>\n    <div class="footer">\n      <button class="btn btn-default close-btn" type="button">${tr("dialog_close")}</button>\n      <button class="btn btn-default add-temp-condition-btn" type="button">Add temp condition</button>\n      <button class="btn btn-primary add-condition-btn" type="button">Add condition</button>\n    </div>\n  </div>\n  `,createProfileDropdown(state,urlContainerEl);const typeEl=urlContainerEl.querySelector(".condition-type"),detailEl=urlContainerEl.querySelector(".condition-details"),toggleBtnEl=urlContainerEl.querySelector(".toggle-subdomain-level-btn");let level=0;typeEl.onchange=()=>{detailEl.value=generateConditionSuggestion(domain,subdomain,level)[typeEl.value]},toggleBtnEl.onclick=()=>{const conditionSuggestion=generateConditionSuggestion(domain,subdomain,++level);detailEl.value=conditionSuggestion[typeEl.value||"HostWildcardCondition"]},detailEl.value=generateConditionSuggestion(domain,subdomain,level)[typeEl.value],urlContainerEl.querySelector(".close-btn").onclick=()=>{tabulatorInstance.clearAlert()},urlContainerEl.querySelector(".add-temp-condition-btn").onclick=()=>{const profileName=urlContainerEl.querySelector(".omega-profile-select .dropdown-toggle").dataset.profile,pattern=detailEl.value;tabulatorInstance.clearAlert(),OmegaTargetPopup.addTempRule(pattern.substring(2),profileName,1,(()=>{OmegaTargetPopup.setState("lastProfileNameForCondition",profileName,(()=>{Toastify({text:"Add temp condition success",position:"center"}).showToast()}))}))};const addConditionBtnEl=urlContainerEl.querySelector(".add-condition-btn");addConditionBtnEl.onclick=()=>{const profileName=urlContainerEl.querySelector(".omega-profile-select .dropdown-toggle").dataset.profile,pattern=detailEl.value;tabulatorInstance.clearAlert(),OmegaTargetPopup.addCondition([{conditionType:"HostWildcardCondition",pattern:pattern}],profileName,(()=>{OmegaTargetPopup.setState("lastProfileNameForCondition",profileName,(()=>{Toastify({text:"Add condition success",position:"center"}).showToast()}))}))},currentProfileCanAddRule||(addConditionBtnEl.style.display="none"),tabulatorInstance.alert(urlContainerEl)};