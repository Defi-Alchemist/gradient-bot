import{waitTimeout,escapeHTML,copyToClipoard}from"./utils.js";import{initTabsSelector}from"./tab.js";import{initUrlCellDetail}from"./url.js";import Toastify from"../../../lib/toastify/toastify-es.js";import{filesize}from"../../../lib/filesize.esm.js";import{Tabulator,ColumnCalcsModule,TooltipModule,ValidateModule,EditModule,InteractionModule,FrozenColumnsModule,MenuModule,ResizeColumnsModule,SortModule,FilterModule,FormatModule,SelectRowModule,SelectRangeModule,KeybindingsModule}from"../../../lib/tabulator/tabulator_esm.js";Tabulator.registerModule([ColumnCalcsModule,TooltipModule,ValidateModule,EditModule,MenuModule,InteractionModule,FrozenColumnsModule,ResizeColumnsModule,SortModule,FilterModule,FormatModule,SelectRowModule,SelectRangeModule,KeybindingsModule]);const sortRequest=(a,b)=>parseInt(a.requestId)-parseInt(b.requestId),getHeaderValue=(headers,name)=>headers.find((header=>header.name==name))?.value,MAXRECORDS=1e3;let recentlyRequestId=0,autoScrollToBottom=!0;const scrollTabulatorToBottom=tabulatorInstance=>{const el=tabulatorInstance.rowManager.element;el.scrollTop=el.scrollHeight},listenerScrollEvent=tabulatorInstance=>{const targetEl=tabulatorInstance.rowManager.element;let isMouseScroll=!1,timeout=null;targetEl.addEventListener("wheel",(()=>{timeout&&(clearTimeout(timeout),timeout=null),isMouseScroll=!0,timeout=setTimeout((()=>{isMouseScroll=!1,timeout=null}),600)})),tabulatorInstance.on("scrollVertical",(function(top,topDir){if(isMouseScroll)if(topDir)autoScrollToBottom=!1,document.body.classList.add("disable-auto-scroll");else if(!autoScrollToBottom){targetEl.scrollHeight-targetEl.clientHeight-top<30&&(autoScrollToBottom=!0,document.body.classList.remove("disable-auto-scroll"))}}))},createTabulator=()=>{const tabulatorInstance=new Tabulator(".network-list-container",{height:"100%",data:[],layout:"fitColumns",index:"requestId",columnDefaults:{headerClick:(e,column)=>{if(!column.getDefinition().headerSort)return;tabulatorInstance.getSorters().find((sorter=>{if(sorter.column===column&&"asc"===sorter.dir){const currSort=sorter.field+"_"+sorter.dir;return tabulatorInstance.__prevSort===currSort?(tabulatorInstance.clearSort(),tabulatorInstance.__prevSort=null):tabulatorInstance.__prevSort=currSort,!0}return!1}))}},selectableRows:!0,selectableRowsRangeMode:"click",selectableRowsPersistence:!0,footerElement:(()=>{const footerEl=document.createElement("div");footerEl.className="tabulator-footer";const footerContentsEl=document.createElement("div");footerContentsEl.className="tabulator-footer-contents",footerEl.append(footerContentsEl);const tabsSelectorContainerEl=document.createElement("span");tabsSelectorContainerEl.classList.add("tabs-selector-container"),footerContentsEl.append(tabsSelectorContainerEl);const paginatorEl=document.createElement("span");paginatorEl.className="tabulator-paginator",footerContentsEl.append(paginatorEl);const paginatorBtnsEl=document.createElement("span");paginatorBtnsEl.classList.add("btn-group");const scrollToBottomBtnEl=document.createElement("button");scrollToBottomBtnEl.classList.add("btn","btn-default","btn-sm","scroll-to-bottom-btn"),scrollToBottomBtnEl.innerHTML='\n      <span class="glyphicon glyphicon-fast-forward" aria-hidden="true"></span>\n    ',scrollToBottomBtnEl.onclick=()=>{autoScrollToBottom=!0,document.body.classList.remove("disable-auto-scroll"),scrollTabulatorToBottom(tabulatorInstance)},paginatorBtnsEl.append(scrollToBottomBtnEl);const clearBtnEl=document.createElement("button");return clearBtnEl.classList.add("btn","btn-default","btn-sm"),clearBtnEl.innerHTML='\n      <span class="glyphicon glyphicon-ban-circle" aria-hidden="true"></span>\n    ',clearBtnEl.onclick=async()=>{tabulatorInstance.clearData(),waitTimeout(600),autoScrollToBottom=!0,document.body.classList.remove("disable-auto-scroll")},paginatorBtnsEl.append(clearBtnEl),paginatorEl.append(paginatorBtnsEl),footerEl})(),resizableColumnGuide:!0,columns:[{title:"ID",width:100,field:"requestId"},{title:"🕛️",field:"statusInfo.start",width:105,hozAlign:"center",headerHozAlign:"center",headerSort:!0,formatter:cell=>{const cellVal=cell.getValue();return`<time title="${moment(cellVal).toDate().toLocaleString()}">${moment(cellVal).format("HH:mm:ss")}</time>`}},{title:"",field:"recentlyStatus",width:50,hozAlign:"center",headerSort:!1,headerFilter:"list",headerFilterParams:{values:{all:"",ongoing:"Ongoing",done:"Done",fail:"Fail"},elementAttributes:{class:"form-control"},clearable:!0,itemFormatter:function(label,value,item,element){switch(value){case"ongoing":return"<i class='glyphicon glyphicon-circle-arrow-down'/> Ongoing";case"done":return"<i class='glyphicon glyphicon-ok-sign'/> Done";case"fail":return"<i class='glyphicon glyphicon-exclamation-sign'/> Fail";default:return"<i class='glyphicon glyphicon-info-sign'/> All"}}},headerFilterFunc:function(headerValue,rowValue,rowData,filterParams){switch(headerValue){case"ongoing":return["start","ongoing"].indexOf(rowValue)>=0;case"done":return headerValue==rowValue;case"fail":return["error","timeout","timeoutAbort"].indexOf(rowValue)>=0;default:return!0}},formatter:cell=>{const recentlyStatus=cell.getValue(),request=cell.getRow().getData();switch(recentlyStatus){case"start":return"<i class='glyphicon glyphicon-circle-arrow-down status-start' title='Request start'/>";case"done":return"<i class='glyphicon glyphicon-ok-sign status-done' title='Request done'/>";case"timeout":return"<i class='glyphicon glyphicon-question-sign status-timeout' title='Request timeout'/>";case"timeoutAbort":return"<i class='glyphicon glyphicon-exclamation-sign status-timeout-abort' title='Request timeout abort'/>";case"error":return`<i class='glyphicon glyphicon-exclamation-sign status-error' title='Request error: ${request.error||""}'/>`;case"ongoing":return"<i class='glyphicon glyphicon-circle-arrow-down status-ongoing' title='Request ongoing'/>"}}},{title:"Profile",field:"profileName",width:300,headerFilter:"input",headerFilterParams:{elementAttributes:{class:"form-control"}},tooltip:(e,cell,onRendered)=>{const el=document.createElement("div"),actionProfile=cell.getRow().getData().actionProfile||{},detailTitle=actionProfile.title||actionProfile.shortTitle||"";return el.innerText=detailTitle,el}},{title:"URL",field:"url",minWidth:300,tooltip:!0,cssClass:"url-field",headerFilter:"input",headerFilterParams:{elementAttributes:{class:"form-control"}},formatter:cell=>`<span class="glyphicon glyphicon-duplicate copy-btn" aria-hidden="true"></span><span>${escapeHTML(decodeURI(cell.getValue()))}</span>`,cellClick:(e,cell)=>{e&&e.target&&(e.preventDefault(),e.stopPropagation(),e.target.classList.contains("copy-btn"))?copyToClipoard(cell.getValue()).then((()=>{Toastify({text:"Copy success",position:"center"}).showToast()})):initUrlCellDetail(cell)}},{title:"Time",field:"recentlyTimestamp",headerSort:!1,width:100,formatter:cell=>{const recentlyStatus=cell.getValue(),request=cell.getRow().getData(),startTimestamp=request.statusInfo.start,recentlyTimestamp=request.statusInfo[recentlyStatus];if(recentlyTimestamp&&startTimestamp){let icon='<span class="glyphicon glyphicon-question-sign request-from-icon"></span>';"done"==recentlyStatus&&(icon='<span class="glyphicon glyphicon-cloud request-from-icon" title="From remote server"></span>',request.fromCache&&(icon='<span class="glyphicon glyphicon-hdd request-from-icon" title="From local cache"></span>'));return`${icon} ${Number.parseFloat(recentlyTimestamp-startTimestamp).toFixed(2)}ms`}return"-"}},{title:"Remote IP",field:"ip",width:200,headerFilter:"input",headerFilterParams:{elementAttributes:{class:"form-control"}}},{title:"MethodType",field:"type",width:100,visible:!1},{title:"Status",field:"statusCode",width:100},{title:"Type",field:"contentType",width:100,tooltip:!0,headerFilter:"input",headerFilterParams:{elementAttributes:{class:"form-control"}}},{title:"Size",field:"contentLength",width:100,tooltip:!0,formatter:cell=>{const cellVal=cell.getValue()||0;return cellVal>0?filesize(cellVal):"-"}},{title:"Cache",field:"fromCache",width:50,visible:!1},{title:"Method",field:"method",width:100,visible:!1},{title:"Tab",field:"tabId",width:50,visible:!1}]});return window.tt=tabulatorInstance,tabulatorInstance.on("rowAdded",(function(row){const rowCount=tabulatorInstance.getDataCount(),rows=tabulatorInstance.getRows();rowCount>MAXRECORDS&&rows[0].delete()})),new Promise((resolve=>{const onTableBuilt=()=>{tabulatorInstance.alert("loading..."),tabulatorInstance.off("tableBuilt",onTableBuilt),listenerScrollEvent(tabulatorInstance),resolve(tabulatorInstance)};tabulatorInstance.on("tableBuilt",onTableBuilt)}))};function createConnectPort(tabulatorInstance,tabsSelectorInstance){let sequenceDataCache={};async function sequenceUpdateDatas(datas=[]){if(datas.forEach((data=>{sequenceDataCache[data.requestId]=data})),!sequenceUpdateDatas.isRunning){for(sequenceUpdateDatas.isRunning=!0;Object.keys(sequenceDataCache).length>0&&"visible"===document.visibilityState&&autoScrollToBottom;){let useReplace=!1;if(console.log("update datassssss:::",Object.keys(sequenceDataCache).length,sequenceDataCache),Object.keys(sequenceDataCache).length>20){useReplace=!0;tabulatorInstance.getData().forEach((data=>{sequenceDataCache[data.requestId]||(sequenceDataCache[data.requestId]=data)}))}let sequenceDatas=Object.values(sequenceDataCache);const filterTabId=tabsSelectorInstance.getSelectedTabId();if(filterTabId&&(sequenceDatas=sequenceDatas.filter((data=>filterTabId==data.tabId))),sequenceDatas.sort(sortRequest),sequenceDatas.length>MAXRECORDS&&(sequenceDatas=sequenceDatas.slice(-MAXRECORDS)),sequenceDataCache={},0==sequenceDatas.length)continue;const lastRequestId=parseInt(sequenceDatas[sequenceDatas.length-1].requestId);if(useReplace){const selectedDatas=tabulatorInstance.getSelectedData();await tabulatorInstance.replaceData(sequenceDatas),tabulatorInstance.selectRow(selectedDatas.map((data=>data.requestId)))}else await tabulatorInstance.updateOrAddData(sequenceDatas);lastRequestId>recentlyRequestId&&(recentlyRequestId=lastRequestId)}autoScrollToBottom&&scrollTabulatorToBottom(tabulatorInstance),sequenceUpdateDatas.isRunning=!1}}document.addEventListener("visibilitychange",(function(){"visible"===document.visibilityState&&(console.log("visible::::",Object.keys(sequenceDataCache).lenth,sequenceDataCache),sequenceUpdateDatas())}));const config={attributes:!0,attributeFilter:["class"]};new MutationObserver((function(mutationsList,observer){for(const mutation of mutationsList)"attributes"===mutation.type&&"class"===mutation.attributeName&&(document.body.classList.contains("disable-auto-scroll")||sequenceUpdateDatas())})).observe(document.body,config);const port=chrome.runtime.connect({name:"network-inspect"}),decorateRequest=request=>{if(request.actionProfile){const prefix=request.actionProfile.prefix||"";request.profileName=prefix+request.actionProfile.shortTitle.substring(6)}request.responseHeaders&&"done"==request.recentlyStatus&&(request.contentType=getHeaderValue(request.responseHeaders,"content-type")||"-",request.contentLength=parseInt(getHeaderValue(request.responseHeaders,"content-length"))||0)},onMessage=msg=>{switch(msg.type){case"connected":port.postMessage({type:"init",tabId:tabsSelectorInstance.getSelectedTabId()});break;case"init":{const requests=[];Object.values(msg.data).forEach((tabRequestInfo=>{if(tabRequestInfo){const requestStatus=tabRequestInfo.requestStatus;Object.values(tabRequestInfo.requests).forEach((request=>{request.recentlyStatus=requestStatus[request.requestId],request.recentlyTimestamp=request.recentlyStatus,request.profileName="",decorateRequest(request),request.statusInfo.start&&!/^(chrome|moz)-extension:\/\//i.test(request.url)&&requests.push(request)}))}})),tabulatorInstance.clearAlert(),tabulatorInstance.clearData(),sequenceUpdateDatas(requests.slice(-MAXRECORDS));break}case"update":{const{info:info,req:req,status:status}=msg.data;if(req){const request=info.requests[req.requestId],requestStatus=info.requestStatus;request.recentlyStatus=requestStatus[request.requestId],request.recentlyTimestamp=request.recentlyStatus,decorateRequest(request),sequenceUpdateDatas([request])}break}}},onDisconnect=()=>{port.onMessage.removeListener(onMessage),port.onDisconnect.removeListener(onDisconnect),tabulatorInstance.alert("The connection has been closed. Please try refreshing this page to continue network monitoring.")};return port.onDisconnect.addListener(onDisconnect),port.onMessage.addListener(onMessage),port}const init=async()=>{const currentTab=await chrome.tabs.getCurrent();await chrome.tabs.update(currentTab.id,{autoDiscardable:!1});const tabulatorInstance=await createTabulator(),tabsSelectorContainerEl=document.querySelector(".tabs-selector-container"),port=createConnectPort(tabulatorInstance,await initTabsSelector(tabsSelectorContainerEl,{setTab:tab=>{if(tab&&tab.id){const filterTabId=tab.id;port.postMessage({type:"init",tabId:filterTabId})}else port.postMessage({type:"init"});console.log("tab changed:::",tab)}}))};init();